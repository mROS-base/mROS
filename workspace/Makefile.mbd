# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

GCC_BIN =
LIB = libmbed
PROJECT = GR-PEACH_mbed


ALL_OBJ = $(ASM_OBJ) $(C_OBJ) $(CXX_OBJ)

LIBRARY_PATHS = 
LIBRARIES = 

LINKER_SCRIPT = $(MBED_LIB_DIR)/mbed-src/targets/cmsis/TARGET_RENESAS/TARGET_RZ_A1H/TOOLCHAIN_GCC_ARM/RZA1H.ld


############################################################################### 
ifneq ($(USE_TRUESTUDIO),true)
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
SIZE    = $(GCC_BIN)arm-none-eabi-size 
AR = $(GCC_BIN)arm-none-eabi-ar
NM = $(GCC_BIN)arm-none-eabi-nm
RANLIB = $(GCC_BIN)arm-none-eabi-ranlib
else
AS      = arm-atollic-eabi-as
CC      = arm-atollic-eabi-gcc
CPP     = arm-atollic-eabi-g++
LD      = arm-atollic-eabi-gcc
OBJCOPY = arm-atollic-eabi-objcopy
OBJDUMP = arm-atollic-eabi-objdump
SIZE    = arm-atollic-eabi-size 
AR = arm-atollic-eabi-ar
NM = arm-atollic-eabi-nm
RANLIB = arm-atollic-eabi-ranlib
endif

ifneq ($(USE_TRUESTUDIO),true)
CPU = -mcpu=cortex-a9 -mthumb -mthumb-interwork -marm -march=armv7-a -mfpu=vfpv3 -mfloat-abi=hard -mno-unaligned-access 
else
CPU = -mcpu=cortex-a9 -mthumb -marm -march=armv7-a -mfpu=vfpv3 -mfloat-abi=hard -mno-unaligned-access 
endif

CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
CC_FLAGS += -fno-exceptions -fno-builtin -ffunction-sections -fdata-sections -fno-delete-null-pointer-checks -fomit-frame-pointer
CC_FLAGS += -MMD -MP

CC_SYMBOLS = -DTARGET_RZ_A1H -DTARGET_MBRZA1H -DTARGET_FF_ARDUINO -DTOOLCHAIN_GCC_ARM -DTOOLCHAIN_GCC -DTARGET_CORTEX_A -DMBED_BUILD_TIMESTAMP=1458722901.8 -D__MBED__=1 -DTARGET_RENESAS -DTARGET_LIKE_MBED -D__MBED_CMSIS_RTOS_CA9 -D__EVAL -D__FPU_PRESENT -DTARGET_LIKE_CORTEX_A9 -D__CMSIS_RTOS -DTARGET_A9 -D__CORTEX_A9 -DARM_MATH_CA9 -DTOPPERS_RZA1H -D_DEBUG_HTTP_SERVER_H -DLWIP_DEBUG -DGRPEACH -DWOLFSSL_USER_SETTINGS -DWOLFSSL_LIB


#LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -u _printf_float -u _scanf_float -Wl,--wrap,main -Wl,-Map=$(PROJECT).map,--cref
LD_FLAGS = $(CPU) -Wl,--gc-sections -nostartfiles --specs=nano.specs -u _printf_float -u _scanf_float -Wl,-Map=$(PROJECT).map,--cref
# LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys
LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lc -lgcc -lnosys

ifeq ($(DEBUG), true)
  CC_FLAGS += -DDEBUG -O0
  ASM_FLAGS += -DDEBUG -O0 
else
  CC_FLAGS += -DNDEBUG -Os
endif

.PHONY: all clean

all: $(LIB).a

#clean:
#	rm -f $(LIB).lib $(ALL_OBJ) $(DEPS)

$(ASM_OBJ): %.o: %.S
	$(CC) $(CPU) $(ASM_FLAGS) -c -x assembler-with-cpp -o $@ $<

$(C_OBJ): %.o: %.c
	$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<

$(CXX_OBJ): %.o: %.cpp
	$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti $(INCLUDE_PATHS) -o $@ $<

$(LIB).a: $(ALL_OBJ)
	rm -f $(LIB).a
	$(AR) -rcs $(LIB).a $(ALL_OBJ)
	$(RANLIB) $(LIB).a

#
#  ASPカーネルのビルドに関するその他のオプション
#
CLEAN_FILES += $(PROJECT).map $(APPLNAME).d
DEPS += $(ALL_OBJ:.o=.d)
-include $(DEPS)

APPL_CFLAGS =
APPL_LIBS = libmbed.a
APPL_DIR = .

INCLUDES += $(INCLUDE_PATHS) # MBEDライブラリのヘッダファイルをアプリで使う
COPTS += -mfpu=vfpv3 -mfloat-abi=hard
CDEFS += -DTOPPERS_OMIT_BSS_INIT -DTOPPERS_OMIT_DATA_INIT # ASPのスタートアップルーチンでは初期化処理は不要
CDEFS += -DGRPEACH

APPL_CXXFLAGS += $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti
CXXLIBS += $(LD_SYS_LIBS)
LDFLAGS += $(LD_FLAGS)
LDSCRIPT = $(LINKER_SCRIPT)
